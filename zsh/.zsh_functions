#!/usr/bin/env zsh

source ~/.zsh_git_functions

len(){
  place=cwd
  ls ${1:$place} | wc -l
}

da() { docker exec -it $1 /bin/bash }

dl() { docker logs -n 100 --follow $1 }

rnet() {sudo ifconfig en0 down; sudo ifconfig en0 up;}

td () {
  local location=~/Documents/Obsidian/Notes/todo.md
  if [[ "$1" == "e" ]]; then
    v "$location"
  else
    glow "$location"
  fi
}

postpush() {
  local originUrl=$(git remote get-url origin)

  if [[ $originUrl =~ bitbucket || $originUrl =~ github ]]; then
    tmux capture-pane -S -900 -p | node /Users/joaovfsousa/.scripts/get-last-url.js | pbcopy
  else
    echo "Push was successfull but could not copy url to clipboard"
  fi
}

mark() {
  last_wd=$(pwd)
}

back() {
  builtin cd $last_wd
}

b() {
  temp=$(pwd)
  builtin cd $last_wd
  last_wd="$temp"
}

function dll {
  if [[ "$1" == "-l" ]]; then
    if [ -z $container_id ]; then 
      echo 'No container id found.'
      return
    else
      dl $container_id
      return
    fi
  fi

  local docker_container=$(docker ps --format "{{json . }}")

  if [[ "$1" == "-a" ]]; then
    docker_container=$(docker ps -a --format "{{json . }}")
  fi

  local selected_container=$(echo $docker_container | 
    jq -r '.Names + " | " + .Status + " | " + .Ports + " | " + .Image  + ", ID: " + .ID' |
    fzf )

  container_id=$(echo "$selected_container" | awk -F 'ID: ' '{print $2}')

  dl $container_id
}

function run-script {
  local script_name=$1

  if [ -f yarn.lock ]; then
    yarn run "$script_name"
  elif [ -f pnpm-lock.yaml ]; then
    pnpm run "$script_name"
  else
    npm run "$script_name"
  fi
}

function run {
  if [ -f package.json ]; then
    if ! jq -e '.scripts' package.json >/dev/null; then
      echo "No scripts found in package.json"
      return
    fi

    local script=$(jq -r '.scripts' package.json | sed '1d;$d' | fzf --height 40% --reverse --query="$1")

    local script_name=$(echo $script | awk -F'"' '{print $2}')
    local script_value=$(echo $script | awk -F'"' '{print $4}')

    if [ -n "$script" ]; then
      echo "Running: $script_name"
      echo "Script: $script_value"
      run-script $script_name
    fi
  elif [[ -f Cargo.toml ]]; then
    cargo run
  else
    echo "No package.json or Cargo.toml found"
  fi
}

alias r='run'

function brew {
  /opt/homebrew/bin/brew $@

  if ([ $1 = "install" ] || [ $1 = "uninstall" ]) && [ $2 != "-h" ]; then
    local current_dir=$(pwd)

    builtin cd '/Users/joaovfsousa/Projects/dotfiles'
    brew bundle dump --force

    git add Brewfile
    git ci -m "Update Brewfile" -q
    git push -q

    echo "Brewfile updated and pushed to dotfiles repo"

    builtin cd $current_dir
  fi
}

function jump_to_worktree {
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    current=$(pwd | xargs basename)
    list_of_worktrees=$(git worktree list | sed -E '/bare|\.repo/d')

    local worktree_path=$(echo $list_of_worktrees | fzf --height 40% --reverse | awk '{print $1}')

    cd "$worktree_path"
  else
    echo "Not inside a worktree repo."
  fi
}

function last_commit {
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    hash=$(g log -1 --oneline | awk '{print $1}')
    echo $hash | pbcopy && echo "Commit $hash copied to clipboard"
  else
    echo "Not a git repository"
    return 1
  fi
}

function last_commit_msg {
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    commit_msg=$(git log -1 --pretty=format:%B | sed -e 's/^/ /')

    echo $commit_msg | pbcopy && echo "Commit message copied to clipboard"
  else
    echo "Not a git repository"
    return 1
  fi
}
